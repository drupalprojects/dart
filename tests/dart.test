<?php
/**
 * @file
 * Test file for DART module.
 */

class dartBaseTest extends DrupalWebTestCase {
  /**
   * Implementation of setUp().
   */
  function setUp() {
    // Enable a couple modules.
    parent::setUp('ctools', 'dart', 'libraries', 'contextual');
    menu_rebuild();

    // Create an admin user with all the permissions needed to run tests.
    $this->admin_user = $this->drupalCreateUser(array('administer DART tags', 'administer taxonomy', 'access administration pages', 'administer blocks', 'bypass node access', 'administer nodes', 'edit terms in 1', 'access contextual links'));
    $this->drupalLogin($this->admin_user);

    // Setup the basic global settings for DART.
    $this->globalSettings = $this->dartGlobalSettings();
  }

  /**
   * Set some default global settings for the DART module.
   */
  function dartGlobalSettings($edit = array()) {
    $key_vals = $this->dartGenerateKeyVals(3);

    $edit += array(
      'dart_global_prefix' => $this->randomName(8),
      'dart_global_site' => $this->randomName(8),
      'dart_global_zone' => $this->randomName(8),
      'dart_global_slug' => $this->randomName(8),
      'dart_load_last' => FALSE,
      'dart_noscript' => FALSE,
      'dart_include_taxonomy_terms' => 1,
      'dart_enable_ad_categories' => 1,
      'dart_enable_ad_categories_bundles[tags]' => 'tags',
      'dart_special_key_vals[tile]' => 'tile',
      'dart_special_key_vals[ord]' => 'ord',
      'dart_special_tile_init' => 0,
      'dart_js' => 'console.log("' . $this->randomName(8) . '")',
      'dart_test_prefix' => $this->randomName(8),
      'dart_test_site' => $this->randomName(8),
      'dart_test_zone' => $this->randomName(8),
    );

    for ($i = 0; $i < count($key_vals); $i++) {
      $basic_tag['dart_key_vals[' . $i . '][key]'] = $key_vals[$i]['key'];
      $basic_tag['dart_key_vals[' . $i . '][val]'] = $key_vals[$i]['val'];
      $basic_tag['dart_key_vals[' . $i . '][eval]'] = $key_vals[$i]['eval'];
    }

    $this->drupalPost('/admin/structure/dart_tags/settings', $edit, t('Save configuration'));

    return $edit;
  }

  /**
   * Create a simple $edit array to be used on the DFP tag form to create a new
   * DFP tag object.
   */
  function dartTagEditValues() {
    $machinename = drupal_strtolower($this->randomName(8));
    $key_vals = $this->dartGenerateKeyVals(3);

    $basic_tag = array(
      'machinename' => $machinename,
      'name' => $this->randomName(8),
      'pos' => $this->randomName(8),
      'sz' => implode(',', $this->dartGenerateSize(2)),
      'site' => $this->randomName(8),
      'zone' => $this->randomName(8),
      'slug' => $this->randomName(8),
      'block' => 1,
      'scriptless' => FALSE,
      'method' => 'adj',
    );

    for ($i = 0; $i < count($key_vals); $i++) {
      $basic_tag['key_vals[' . $i . '][key]'] = $key_vals[$i]['key'];
      $basic_tag['key_vals[' . $i . '][val]'] = $key_vals[$i]['val'];
      $basic_tag['key_vals[' . $i . '][eval]'] = $key_vals[$i]['eval'];
    }

    return $basic_tag;
  }

  /**
   * Generate random key value pairs.
   */
  function dartGenerateKeyVals($count = 1) {
    $key_vals = array();

    for ($i = 0; $i < $count; $i++) {
      $key_vals[] = array(
        'key' => $this->randomName(8),
        'val' => $this->randomName(8),
        'eval' => 0,
      );
    }

    return $key_vals;
  }

  /**
   * Generate a random size (or array or sizes) to use when testing tags
   * formatted as ###x###.
   */
  function dartGenerateSize($count = 1) {
    $sizes = array('300x250', '300x600', '728x90', '728x10', '160x600', '120x80', '300x100', '50x50', '160x300');
    shuffle($sizes);

    return $count == 1 ? array_pop($sizes) : array_slice($sizes, 0, min($count, count($sizes)));
  }

  /**
   * Creates a basic dfp ad tag.
   */
  function createTag($edit = array()) {
    // Create a new tag.
    $edit += $this->dartTagEditValues();
    $this->drupalPost('admin/structure/dart_tags/add', $edit, t('Save'));

    // Load the tag object.
    $tag = dart_tag_load($edit['machinename']);
    $this->assertTrue(is_object($tag) && $tag->machinename = $edit['machinename'], 'The new tag was saved correctly.');

    // Display the new tag.
    $edit = array();
    $delta = 'dart_dart-tag-' . (drupal_strlen($tag->machinename) >= 32 ? md5($tag->machinename) : $tag->machinename);
    $edit['blocks[' . $delta . '][region]'] = 'sidebar_first';
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));

    // Assert that contextual links were added.
    $this->assertText(t('Configure DART Tag'), 'A contextual link was properly added to the block.');

    return $tag;
  }

  /**
   * Edit a given tag specified by $machinename with the given values.
   */
  function editTag($machinename, &$edit) {
    // Make sure there is no machinename set when we are editing.
    if (isset($edit['machinename'])) {
      unset($edit['machinename']);
    }

    $this->drupalPost('admin/structure/dart_tags/list/' . $machinename . '/edit', $edit, t('Save'));
    $tag = dfp_tag_load($machinename);

    return $tag;
  }

  /**
   * Assert that the given tag is being displayed properly within the raw HTML
   * of the page.
   *
   * @param  object $tag
   */
  function assertTag($tag) {
    $tag = (array)$tag;

    foreach ($tag as $key => $value) {
      if (is_array($value)) {
        $this->assertTag($tag[$key]);
      }
      elseif (is_string($value)) {
        if ($key != 'src' && $key != 'href') { // @todo: this if statement is a hack because of slash issues.
          $this->assertRaw('"' . $key . '":"' . $value . '"', "Tag: " . $key . " was properly included.");
        }
      }
    }
  }
}

class dartTagCRUDTest extends dartBaseTest {
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('DART Tag CRUD Operations'),
      'description' => t('Tests for displaying DART tags.'),
      'group' => t('DART'),
    );
  }

  function testDisplayTag() {
    // Create a simple tag as a block.
    $tag = $this->createTag();
    $this->assertTag($tag);
  }

  function testUpdateTag() {
    // Create a simple tag.
    $tag = $this->createTag();
    $edit = $this->dartTagEditValues();
    $this->editTag($tag->machinename, $edit);
    $this->assertTag($tag);
  }

  function testDeleteTag() {
    // Create a simple tag as a block and then delete it.
    $tag = $this->createTag();
    $this->drupalPost('admin/structure/dart_tags/list/' . $tag->machinename . '/delete', array(), t('Delete'));
    $this->assertNoText(t('%machinename is not a valid DART tag.', array('%machinename' => $tag->machinename)), 'The deleted tag is not attempting to display as a block.');
    $this->drupalGet('admin/structure/dart_tags/list');
    $this->assertNoText($tag->name, 'The deleted tag does not appear in the list of tags.');
  }
}

class dartKeyValTest extends dartBaseTest {
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('DART Tag Key|Values Tests'),
      'description' => t('Tests that key|value pairs are added to DART tags properly.'),
      'group' => t('DART'),
    );
  }

  // Test gloabl key vals
  // Test tag specific key vals
  // Test "special" key vals
  // Test tokens in key vals
}

class dartNoScriptTest extends dartBaseTest {
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('DART Tag noscript Tests'),
      'description' => t('Tests that DART tags display noscript tags properly.'),
      'group' => t('DART'),
    );
  }

  // Test noscript tags display properly
}

class dartAdCategoriesTest extends dartBaseTest {
  /**
   * Implements getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => t('DART Ad Categories Tests'),
      'description' => t('Tests that DART Ad Categories work properly.'),
      'group' => t('DART'),
    );
  }

  // Test that terms are added to tags properly
  // Test that Ad Categories are used instead of terms when appropriate
}




