<?php
// $Id$

include_once('dart-tag.inc');

/**
 * The doublclick URL.
 */
define('DART_URL', 'http://ad.doubleclick.net');

/**
 * Implementation of hook_help().
 */
function dart_help($path, $arg) {
  switch ($path) {
    case 'admin/help#dart':
      $output = '<p>'. t('The DART module allows you to integrate Doubleclick ad tags onto your site.') . '</p>';
      $output .= '<p>'. t('This module provides you with a general settings form as well as the ability to create a tag (with all its associated data) in the database. You can then add a simple bit of php to your tpl.php file(s) within your theme to indicate where specific tags should be displayed.') . '</p>';
      $output .= '<p>'. t('In addition, you can tell this module about specific javascript variables that exist on your pages in order to include them in your ad tags. For example, you can include a variable called "channel" with a value of "sports".') . '</p>';
      return $output;
  }
}

/**
 * Implementation of hook_perm().
 */
function dart_perm() {
  return array('administer DART tags', 'schedule DART tags');
}

/**
 * Implementation of hook_menu().
 */
function dart_menu() {
  // Admin dart pages.
  $items['admin/settings/dart'] = array(
    'title' => 'DART Settings',
    'description' => "Configure your site-wide DART settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dart_admin_settings'),
    'access arguments' => array('administer DART tags'),
    'file' => 'dart.admin.inc',
  );
  $items['admin/build/adtag'] = array(
    'title' => 'DART Ad Tags',
    'description' => 'List and create DART ad tags to be placed throughout your site.',
    'page callback' => 'dart_admin_tag_list',
    'access arguments' => array('administer DART tags'),
    'file' => 'dart.admin.inc',
  );
  $items['admin/build/adtag/list'] = array(
    'title' => 'List tags',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/build/adtag/create'] = array(
    'title' => 'Create tag',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dart_admin_tag'),
    'access arguments' => array('administer DART tags'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dart.admin.inc',
  );
  $items['admin/build/adtag/%dart_tag/edit'] = array(
    'title' => 'Edit tag',
    'page callback' => 'dart_tag_edit',
    'page arguments' => array(3),
    'access arguments' => array('administer DART tags'),
    'file' => 'dart.admin.inc',
  );
  $items['admin/build/adtag/schedule'] = array(
    'title' => 'Scheduled tag events',
    'description' => 'Schedule when DART tags should be activated or deactivated',
    'page callback' => 'dart_admin_event_list',
    'access arguments' => array('schedule DART tags'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dart.admin.inc',
  );
  $items['admin/build/adtag/schedule/create'] = array(
    'title' => 'Schedule new event',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dart_admin_event'),
    'access arguments' => array('schedule DART tags'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dart.admin.inc',
  );
  $items['admin/build/adtag/schedule/%dart_event/edit'] = array(
    'title' => 'Edit event',
    'page callback' => 'dart_event_edit',
    'page arguments' => array(4),
    'access arguments' => array('schedule DART tags'),
    'file' => 'dart.admin.inc',
  );

  return $items;
}

/**
 * Implimentation of hook_theme().
 */
function dart_theme() {
  return array(
    'dart_tag' => array(
      'template' => 'dart-tag',
      'arguments' => array('dtid' => '', 'class' => ''),
    ),
    'dart_noscript_tag' => array(
      'template' => 'dart-noscript-tag',
      'arguments' => array('tag' => NULL),
    ),
    'dart_var' => array(
      'arguments' => array('key' => '', 'val' => '', 'type' => ''),
    ),
  );
}

/**
 * Implimentation of hook_block().
 */
function dart_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $result = db_query('SELECT * FROM {dart_tags} WHERE block = %d', 1);
      while ($tag = db_fetch_object($result)) {
        $block['dart-tag-'. $tag->dtid]['info'] = t('DART tag: !tagname', array('!tagname' => $tag->name));
      }
      break;
    case 'configure':
      break;
    case 'save':
      break;
    case 'view':
      $dtid = ltrim($delta, 'dart-tag-');
      $block['content'] = dart_tag($dtid);
      break;
  }
  if (isset($block)) {
    return $block;
  }
}

/**
 * Implimentation of hook_cron().
 */
function dart_cron() {
  // Grab all events scheduled to run "today" or earlier.
  $result = db_query('SELECT dtsid, dtid, event_type FROM {dart_tags_schedule} WHERE event_time <= date(now())');
  while ($event = db_fetch_array($result)) {
    // Trigger event accordingly.
    db_query('UPDATE {dart_tags} SET active = %d WHERE dtid = %d', array($event['event_type'] == 'activate' ? 1 : 0, $event['dtid']));
    // Delete the scheduled event so it isn't run again.
    db_query('DELETE FROM {dart_tags_schedule} WHERE dtsid = %d', array($event['dtsid']));
    watchdog('DART', 'Scheduled DART tag event: id#@dtid was @status', array('@dtid' => $event['dtid'], '@status' => $event['event_type'] . 'd'), WATCHDOG_NOTICE);
  }
}

/**
 * Wrapper function for outputting
 * themed dart tag
 */
function dart_tag($dtid, $class='') {
  $tag = dart_tag_load($dtid);
  return $tag->display($class);
}

/**
 * Return the adtag object matching a DART Tag ID.
 *
 * @param $dtid
 *   The DART tag's ID
 *
 * @return
 *   The adtag object with all of its metadata, if exists, FALSE otherwise.
 *   Results are statically cached.
 */
function dart_tag_load($dtid) {
  static $tags = array();

  $tag = new DartTag($dtid);
  $tags[$dtid] = isset($tag->dtid) ? $tag : false;

  return $tags[$dtid];
}

/**
 * Menu callback used to display DART tag edit form.
 *
 * @param $dart_tag
 *   The DART tag object
 *
 * @return
 *   Edit form
 */
function dart_tag_edit($tag){
  if (isset($_POST['op']) && $_POST['op'] == t('Delete Tag')) {
    return drupal_get_form('dart_admin_tag_confirm_delete', $tag);
  }
  
  // We pass in $tag->obj because that is the data
  // as it comes out of the database. Otherwise things
  // like site and zone will be processed already.
  return drupal_get_form('dart_admin_tag', (array)$tag->obj);
}

/**
 * Delete a DART tag from the database.
 *
 * @param $dtid
 *   The DART tag's ID
 */
function dart_tag_delete($dtid){
  db_query('DELETE FROM {dart_tags} WHERE dtid = %d', $dtid);
}

/**
 * Return the DARTscheduled event object matching a DART Tag Schedule ID.
 *
 * @param $dtsid
 *   The DART tag's schedule ID
 *
 * @return
 *   The event object with all of its metadata, if exists, FALSE otherwise.
 *   Results are statically cached.
 */
function dart_event_load($dtsid) {
  static $events = array();

  if (!isset($events[$dtsid])) {
    // Create the DART tag scheduled event object.
    $result = db_query('SELECT * FROM {dart_tags_schedule} WHERE dtsid = %d', $dtsid);
    $events[$dtsid] = db_fetch_object($result);
  }

  return $events[$dtsid];
}

/**
 * Menu callback used to display DART tag edit form.
 *
 * @param $dart_tag
 *   The DART tag object
 *
 * @return
 *   Edit form
 */
function dart_event_edit($dart_event){
  if (isset($_POST['op']) && $_POST['op'] == t('Cancel Event')) {
    return drupal_get_form('dart_admin_event_confirm_delete', $dart_event);
  }
  return drupal_get_form('dart_admin_event', (array)$dart_event);
}

/**
 * Delete a scheduled DART tag event from the database.
 *
 * @param $dtsid
 *   The DART tag's scheduled event ID
 */
function dart_event_delete($dtsid){
  db_query('DELETE FROM {dart_tags_schedule} WHERE dtsid = %d', $dtsid);
}

/**
 * Implimentation of hook_preprocess_page.
 */
function dart_preprocess_page(&$variables){
  $inline_js = '';

  // Include the user-defined js injection if they entered one.
  $inline_js .= variable_get('dart_js', '') . "\n";

  // Grab page variables and format them.
  $page_vars = dart_get_page_vars();
  if (count($page_vars)) {
    foreach ($page_vars as $key=>$val) {
      $inline_js .= 'Drupal.DART.' . $key . ' = ' . ($key == "ord" ? $val : drupal_to_js($val)) . ';' . "\n";
    }
  }

  // Include the inline js & dart.js file.
  drupal_add_js(trim($inline_js, "\n"), 'inline');
  drupal_add_js(drupal_get_path('module', 'dart') . '/dart.js');

  // Regenerate scripts variable to incorporate newly added scripts.
  $variables['scripts'] = drupal_get_js();
}

/**
 * Preprocess the dart_tag theme hook.
 *
 * Inputs: tag_name
 *
 * @see dart-tag.tpl.php
 */
function template_preprocess_dart_tag(&$variables) {
  $tag = dart_tag_load($variables['dtid']);

  $variables['tag']     = $tag;
  $variables['slug']    = $tag->slug;
  $variables['pos']     = $tag->pos;
  $variables['sz']      = $tag->sz;
  $variables['js_tag']  = drupal_to_js($tag);
}

/**
 * Preprocess the dart_noscript_tag theme hook.
 *
 * Inputs: tag
 *
 * @see dart-noscript-tag.tpl.php
 */
function template_preprocess_dart_noscript_tag(&$variables) {
  $tag = $variables['tag'];

  $special_kvs = variable_get('dart_special_kvs',array());
  if($special_kvs['tile']){
    static $tile = 0;
    $tile++;
  }
  if($special_kvs['ord']){
    static $ord = 0;
    if ($ord == 0) { $ord = rand(1000000000,9999999999) . '?'; }
  }

  $src  = DART_URL . '/jump/' . $tag->prefix . '.' . $tag->site . '/' . $tag->zone . ';';
  $src .= 'pos=' . $tag->pos . ';';
  $src .= 'sz=' . $tag->sz . ';';
  foreach ($tag->options['keyvals'] as $key=>$val){
    if (!$val['eval']){
      if (is_array($val['val'])) {
        foreach ($val['val'] as $subkey=>$subval) {
          $src .= $key . '=' . $subval .';';
        }
      } else {
        $src .= $key . '=' . $val['val'] .';';
      }
    }
  }
  $src .= $tile ? 'tile=' . $tile .';' : '';
  $src .= $ord ? 'ord=' . $ord : '';

  $variables['src'] = $src;
}

function dart_get_page_vars() {
  $vars = array();

  // Set the dart url
  $vars['dart_url'] = DART_URL;

  // Setup page-wide Dart vals as varibales.
  foreach (variable_get('dart_special_kvs',array()) as $key => $val){
    if (empty($val)){ continue; }
    switch($key){
      case 'ord':
        $vars['ord'] = "1000000000 + Math.floor(Math.random()*900000000)";
        break;
      case 'tile':
        $vars['tile'] = "0";
        break;
    }

  }

  return $vars;
}
