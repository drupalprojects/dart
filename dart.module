<?php
// $Id$

/**
 * The doublclick URL.
 */
define('DART_URL', 'http://ad.doubleclick.net');

/**
 * Implementation of hook_help().
 */
function dart_help($path, $arg) {
  switch ($path) {
    case 'admin/help#dart':
      $output = '<p>'. t('The DART module allows you to integrate Doubleclick ad tags onto your site.') . '</p>';
      $output .= '<p>'. t('This module provides you with a general settings form as well as the ability to create a tag (with all its associated data) in the database. You can then add a simple bit of php to your tpl.php file(s) within your theme to indicate where specific tags should be displayed.') . '</p>';
      $output .= '<p>'. t('In addition, you can tell this module about specific javascript variables that exist on your pages in order to include them in your ad tags. For example, you can include a variable called "channel" with a value of "sports".') . '</p>';
      return $output;
  }
}

/**
 * Implementation of hook_perm().
 */
function dart_perm() {
  return array('administer DART tags');
}

/**
 * Implementation of hook_menu().
 */
function dart_menu() {
  // Admin dart pages.
  $items['admin/settings/dart'] = array(
    'title' => 'DART Settings',
    'description' => "Configure your site-wide DART settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dart_admin_settings'),
    'access arguments' => array('administer DART tags'),
    'file' => 'dart.admin.inc',
  );
  $items['admin/build/adtag'] = array(
    'title' => 'DART Ad Tags',
    'description' => 'List and create DART ad tags to be placed throughout your site.',
    'page callback' => 'dart_admin_tag_list',
    'access arguments' => array('administer DART tags'),
    'file' => 'dart.admin.inc',
  );
  $items['admin/build/adtag/list'] = array(
    'title' => 'List tags',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/build/adtag/create'] = array(
    'title' => 'Create tag',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dart_admin_tag'),
    'access arguments' => array('administer DART tags'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'dart.admin.inc',
  );
  $items['admin/build/adtag/%dart_tag/edit'] = array(
    'title' => 'Edit tag',
    'page callback' => 'dart_tag_edit',
    'page arguments' => array(3),
    'access arguments' => array('administer DART tags'),
    'file' => 'dart.admin.inc',
  );

  return $items;
}

/**
 * Implimentation of hook_theme
 */
function dart_theme(){
  return array(
    'dart_tag' => array(
      'template' => 'dart-tag',
      'arguments' => array('dtid' => '', 'class' => ''),
    ),
    'dart_var' => array(
      'arguments' => array('key' => '', 'val' => '', 'type' => ''),
    ),

  );
}

/**
 * Implimentation of hook_init
 */
function dart_init(){
  // Include key/value pairs defined in the DART configuration form.
  $pairs = variable_get('dart_kvs', '');
  $pairs = preg_split("/\r\n|\n|\r/", $pairs);
  foreach($pairs as $pair){
    list($key, $val, $eval) = explode("|", $pair);
    dart_add_var($key, $val, $eval == "eval");
  }

  // Include special vars (ex. tile & ord) as per the DART configuration form.
  foreach (variable_get('dart_vals',array('tile' => 'tile','ord' => 'ord')) as $key => $val){
    if (empty($val)){ continue; }
    switch($key){
      case 'tile':
        dart_add_var($key, 'tile++', TRUE);
        break;
    }
  }
  
}

/**
 * Return the adtag object matching a DART Tag ID.
 *
 * @param $tag_name
 *   The DART tag's name
 *
 * @return
 *   The adtag object with all of its metadata, if exists, FALSE otherwise.
 *   Results are statically cached.
 */
function dart_tag_load_by_name($tag_name){
  static $tags = array();

  if (!isset($tags[$tag_name])) {
    // Create the DART tag object.
    $result = db_query("SELECT * FROM {dart_tags} WHERE name = '%s'", $tag_name);
    $tags[$tag_name] = db_fetch_object($result);
  }

  return $tags[$tag_name];
}

/**
 * Return the adtag object matching a DART Tag ID.
 *
 * @param $dtid
 *   The DART tag's ID
 *
 * @return
 *   The adtag object with all of its metadata, if exists, FALSE otherwise.
 *   Results are statically cached.
 */
function dart_tag_load($dtid){
  static $tags = array();

  if (!isset($tags[$dtid])) {
    // Create the DART tag object.
    $result = db_query('SELECT * FROM {dart_tags} WHERE dtid = %d', $dtid);
    $tags[$dtid] = db_fetch_object($result);
  }

  return $tags[$dtid];
}

/**
 * Menu callback used to display DART tag edit form.
 *
 * @param $dart_tag
 *   The DART tag object
 *
 * @return
 *   Edit form
 */
function dart_tag_edit($dart_tag){
  if (isset($_POST['op']) && $_POST['op'] == t('Delete Tag')) {
    return drupal_get_form('dart_admin_tag_confirm_delete', $dart_tag);
  }
  return drupal_get_form('dart_admin_tag', (array)$dart_tag);
}

/**
 * Delete a DART tag from the database.
 *
 * @param $dtid
 *   The DART tag's ID
 */
function dart_tag_delete($dtid){
  db_query('DELETE FROM {dart_tags} WHERE dtid = %d', $dtid);
}

/**
 * Implimentation of hook_preprocess_page.
 */
function dart_preprocess_page(&$variables){
  $js = '';

  // Set the DART Prefix variable.
  $js .= 'var dartPrefix = ' . drupal_to_js(variable_get('dart_prefix','')) . ';' . "\n";

  // Initialize special vars (ex. tile & ord) as per the DART configuration form.
  foreach (variable_get('dart_vals',array('tile' => 'tile','ord' => 'ord')) as $key => $val){
    if (empty($val)){ continue; }
    switch($key){
      case 'ord':
        $js .= "var ord = 1000000000 + Math.floor(Math.random()*900000000);"."\n";
        break;
      case 'tile':
        $js .= "var tile = 0;"."\n";
        break;
    }
  }

  // Include the user-defined js injection if they entered one.
  $js .= variable_get('dart_js', '') . "\n";

  // Initialize dartVars js variable.
  // - Invoking hook_dart_get_js_vars: modules that impliment this hook should 
  //   return an array structured exactly like the array that dart_get_dart_vars returns.
  $dart_vars = array_merge(module_invoke_all('dart_get_vars'), dart_get_dart_vars());

  $js .= 'var dartVars = ' . drupal_to_js($dart_vars) . ';' . "\n";

  // Set the default site/zone for this page request in the format site/zone. 
  // This will either be the default site/zone (specified in the DART config page)
  // or the site/zone as changed by other modules (via hook_dart_sitezone(&$sitezone));
  // This value might be changed on a tag by tag basis later. 
  $sitezone = array_combine(array('site','zone'), explode('/',variable_get('dart_sitezone', '')));
  $sitezone = module_invoke_all('dart_sitezone', $sitezone);

  $js .= 'var dartSite = ' . drupal_to_js($sitezone['site']) . ';' . "\n";
  $js .= 'var dartZone = ' . drupal_to_js($sitezone['zone']) . ';' . "\n";

  // Include the inline js & dart.js file.
  drupal_add_js(rtrim($js, "\n"), 'inline');
  drupal_add_js(drupal_get_path('module', 'dart') . '/dart.js');

  // Regenerate scripts variable to incorporate newly added scripts.
  $variables['scripts'] = drupal_get_js();
}

/**
 * Preprocess the dart_tag theme hook.
 *
 * Inputs: tag_name
 *
 * @see dart-tag.tpl.php
 */
function template_preprocess_dart_tag(&$variables){
  $tag = dart_tag_load($variables['dtid']);
  $variables['tag'] = $tag;

  if ($tag) {
    // Handle tag-specific overrides.
    $vars = array(
      "dartTagName"=>$tag->name,
      "dartURL"=>DART_URL,
    );
    if (!empty($tag->site)){
      $vars['dartSite'] = $tag->site;
    }
    if (!empty($tag->zone)){
      $vars['dartZone'] = $tag->zone;
    }
    if (!empty($tag->kvs)){
      $dart_vars = array();
      $pairs = preg_split("/\r\n|\n|\r/", $tag->kvs);
      foreach($pairs as $pair){
        list($key, $val, $eval) = explode("|", $pair);
        $dart_vars[$key] = _dart_kv($val,$eval);
      }
      $vars['dartVars'] = $dart_vars;
    }

    $variables['pos'] = $tag->pos;
    $variables['sz'] = $tag->sz;
    $variables['vars'] = drupal_to_js($vars);
  }
}

/**
 * Create a staticly stored array of vars to include 
 * on all ad tags throughout the page being generated.
 * Each tag has an opportunity to override these vars.
 *
 * @param $key
 *   The name of the var to be included in the page's DART ad tags.
 * @param $val
 *   The value of the var to be included in the page's DART ad tags.
 *   - If $val is an array, then $key will be used once per 
 *   - array value; creating several key|value pairs. Example:
 *     ('key' => array('val' => array("val1","val2"), 'eval' => FALSE));
 *     will result in the following being added to the page's DART ad tags:
 *     key=val1;key=val2;
 * @param $eval
 *   A boolean indicating if $val needs to be evaluated by javascript. 
 *   This should be set to TRUE when $val is the name of a variable or
 *   a statement that would normally be passed to the javascript eval()
 *   function.
 *
 * @return
 *   An array of variables to include on dart tags. Example: 
 *   ('key' => array('val' => "value", 'eval' => FALSE)); 
 */
function dart_add_var($key, $val, $eval = FALSE){
  static $dart_vars = array();

  if (!is_null($key)) {
    $dart_vars[$key] = _dart_kv($val,$eval);
  }
  return $dart_vars;
}

/**
 * This is a stub function for dart_add_var(NULL,NULL);
 *
 * @return
 *   An array of variables to include on dart tags. Example: 
 *   ('key' => array('val' => "value", 'eval' => FALSE)); 
 */
function dart_get_dart_vars(){
  return dart_add_var(NULL,NULL);
}

function _dart_kv($val, $eval){
  $kv = array(
    "val" => $val,
    "eval" => $eval,
  );
  return $kv;
}